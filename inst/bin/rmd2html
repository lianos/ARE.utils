#!/usr/bin/env Rscript

usage <- "rmd2html [OPTIONS] INFILE.Rmd [OUTBASE]

  Converts Rmarkdown file INFILE to OUTBASE.md then OUTBSAE.html

  R packages required:
    * optparse
    * knitr
    * markdown"

options(encoding='UTF-8', error=function(err) {
  cat("\n\nAn error happened you didn't account for, exiting ...\n")
  cat("\n\n")
  quit(save='no', status=1)
})
err <- function(..., sep=" ") {
  msg <- paste(unlist(list(...)), sep=sep)
  cat("ERROR:", msg, "\n")
  quit(save='no', status=1)
}

libs.reqd <- c('optparse', 'knitr', 'markdown')
libs.missing <- setdiff(libs.reqd, unlist(sapply(.libPaths(), dir)))
if (length(libs.missing)) {
  err("Required packages missing:", paste(libs.missing, sep=", "))
}

suppressPackageStartupMessages(library(optparse))

opt.list <- list(
  make_option(c('-f', '--force'), default=FALSE, action='store_true',
              help=paste("Converts the document and overwrites output files",
                         "if they already exists. If this flag is not set, ",
                         "the script will stop if output files exist.")),
  make_option(c('-c', '--clean'), default=FALSE, action="store_true",
              help="If set, removes temporary *.md files")
)

parser <- OptionParser(usage=usage, option_list=opt.list)
parsed <- parse_args(parser, positional_arguments=TRUE)
args <- parsed$args
opts <- parsed$options

nargs <- length(args)

if (nargs == 0L || nargs > 2) {
  err("INFILE argument required")
}

infile <- args[1L]
if (!file.exists(infile)) {
  err("Can't find input file")
}
if (!length(grep("\\.rmd$", infile, ignore.case=TRUE))) {
  err("Input does not look like Rmarkdown file")
}

if (length(args) > 1) {
  outbase <- args[2L]
} else {
  outbase <- gsub("\\.rmd$", "", infile, ignore.case=TRUE)
}

out.md <- paste(outbase, "md", sep=".")
out.html <- paste(outbase, "html", sep=".")
if (any(file.exists(c(out.md, out.html))) && !opts$force) {
  err("Output files already exist, I refuse to overwrite them")
}

## ----------------------------------------------------------------------------
## Getting down to business
suppressPackageStartupMessages({
  library(knitr)
  library(markdown)
})

md.opts <- setdiff(markdownHTMLOptions(TRUE), 'hard_wrap')

knitted <- knit(infile, paste(outbase, "md", sep="."))
written <- markdownToHTML(out.md, out.html, options=md.opts)

if (opts$clean) {
  unlink(out.md)
}
